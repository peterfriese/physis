/*
* generated by Xtext
*/
package com.itemis.mobile.physis.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.itemis.mobile.physis.services.PhysisGrammarAccess;

public class PhysisParser extends AbstractContentAssistParser {
	
	@Inject
	private PhysisGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.itemis.mobile.physis.ui.contentassist.antlr.internal.InternalPhysisParser createParser() {
		com.itemis.mobile.physis.ui.contentassist.antlr.internal.InternalPhysisParser result = new com.itemis.mobile.physis.ui.contentassist.antlr.internal.InternalPhysisParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getPlatformAccess().getAlternatives(), "rule__Platform__Alternatives");
					put(grammarAccess.getDataModelAccess().getGroup(), "rule__DataModel__Group__0");
					put(grammarAccess.getMappingClauseAccess().getGroup(), "rule__MappingClause__Group__0");
					put(grammarAccess.getSimpleTypeAccess().getGroup(), "rule__SimpleType__Group__0");
					put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getModelAccess().getDatamodelsAssignment(), "rule__Model__DatamodelsAssignment");
					put(grammarAccess.getDataModelAccess().getNameAssignment_1(), "rule__DataModel__NameAssignment_1");
					put(grammarAccess.getDataModelAccess().getTypesAssignment_3(), "rule__DataModel__TypesAssignment_3");
					put(grammarAccess.getMappingClauseAccess().getMappedTypeAssignment_1(), "rule__MappingClause__MappedTypeAssignment_1");
					put(grammarAccess.getMappingClauseAccess().getPlatformAssignment_3(), "rule__MappingClause__PlatformAssignment_3");
					put(grammarAccess.getSimpleTypeAccess().getNameAssignment_1(), "rule__SimpleType__NameAssignment_1");
					put(grammarAccess.getSimpleTypeAccess().getMappingsAssignment_2(), "rule__SimpleType__MappingsAssignment_2");
					put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
					put(grammarAccess.getEntityAccess().getAttributesAssignment_3(), "rule__Entity__AttributesAssignment_3");
					put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_2(), "rule__Attribute__TypeAssignment_2");
					put(grammarAccess.getAttributeAccess().getMultiplicityAssignment_3(), "rule__Attribute__MultiplicityAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.itemis.mobile.physis.ui.contentassist.antlr.internal.InternalPhysisParser typedParser = (com.itemis.mobile.physis.ui.contentassist.antlr.internal.InternalPhysisParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public PhysisGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(PhysisGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
