/*
* generated by Xtext
*/

package com.itemis.mobile.physis.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PhysisGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cDatamodelsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDatamodelsDataModelParserRuleCall_0 = (RuleCall)cDatamodelsAssignment.eContents().get(0);
		
		//Model:
		//	datamodels+=DataModel*;
		public ParserRule getRule() { return rule; }

		//datamodels+=DataModel*
		public Assignment getDatamodelsAssignment() { return cDatamodelsAssignment; }

		//DataModel
		public RuleCall getDatamodelsDataModelParserRuleCall_0() { return cDatamodelsDataModelParserRuleCall_0; }
	}

	public class DataModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatamodelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypesTypeParserRuleCall_3_0 = (RuleCall)cTypesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DataModel:
		//	"datamodel" name=ID "{" types+=Type* "}";
		public ParserRule getRule() { return rule; }

		//"datamodel" name=ID "{" types+=Type* "}"
		public Group getGroup() { return cGroup; }

		//"datamodel"
		public Keyword getDatamodelKeyword_0() { return cDatamodelKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//types+=Type*
		public Assignment getTypesAssignment_3() { return cTypesAssignment_3; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_3_0() { return cTypesTypeParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	SimpleType | Entity;
		public ParserRule getRule() { return rule; }

		//SimpleType | Entity
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleType
		public RuleCall getSimpleTypeParserRuleCall_0() { return cSimpleTypeParserRuleCall_0; }

		//Entity
		public RuleCall getEntityParserRuleCall_1() { return cEntityParserRuleCall_1; }
	}

	public class MappingClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMappedTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMappedTypeIDTerminalRuleCall_1_0 = (RuleCall)cMappedTypeAssignment_1.eContents().get(0);
		private final Keyword cOnPlatformKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPlatformAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPlatformPlatformEnumRuleCall_3_0 = (RuleCall)cPlatformAssignment_3.eContents().get(0);
		
		//MappingClause:
		//	"is" mappedType=ID "on platform" platform=Platform;
		public ParserRule getRule() { return rule; }

		//"is" mappedType=ID "on platform" platform=Platform
		public Group getGroup() { return cGroup; }

		//"is"
		public Keyword getIsKeyword_0() { return cIsKeyword_0; }

		//mappedType=ID
		public Assignment getMappedTypeAssignment_1() { return cMappedTypeAssignment_1; }

		//ID
		public RuleCall getMappedTypeIDTerminalRuleCall_1_0() { return cMappedTypeIDTerminalRuleCall_1_0; }

		//"on platform"
		public Keyword getOnPlatformKeyword_2() { return cOnPlatformKeyword_2; }

		//platform=Platform
		public Assignment getPlatformAssignment_3() { return cPlatformAssignment_3; }

		//Platform
		public RuleCall getPlatformPlatformEnumRuleCall_3_0() { return cPlatformPlatformEnumRuleCall_3_0; }
	}

	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMappingsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMappingsMappingClauseParserRuleCall_2_0 = (RuleCall)cMappingsAssignment_2.eContents().get(0);
		
		//SimpleType:
		//	"type" name=ID mappings+=MappingClause*;
		public ParserRule getRule() { return rule; }

		//"type" name=ID mappings+=MappingClause*
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//mappings+=MappingClause*
		public Assignment getMappingsAssignment_2() { return cMappingsAssignment_2; }

		//MappingClause
		public RuleCall getMappingsMappingClauseParserRuleCall_2_0() { return cMappingsMappingClauseParserRuleCall_2_0; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Entity:
		//	"entity" name=ID "{" attributes+=Attribute* "}";
		public ParserRule getRule() { return rule; }

		//"entity" name=ID "{" attributes+=Attribute* "}"
		public Group getGroup() { return cGroup; }

		//"entity"
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeTypeCrossReference_2_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cMultiplicityLeftSquareBracketRightSquareBracketKeyword_3_0 = (Keyword)cMultiplicityAssignment_3.eContents().get(0);
		
		//Attribute:
		//	name=ID ":" type=[Type] multiplicity?="[]"?;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=[Type] multiplicity?="[]"?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=[Type]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_2_0() { return cTypeTypeCrossReference_2_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_2_0_1() { return cTypeTypeIDTerminalRuleCall_2_0_1; }

		//multiplicity?="[]"?
		public Assignment getMultiplicityAssignment_3() { return cMultiplicityAssignment_3; }

		//"[]"
		public Keyword getMultiplicityLeftSquareBracketRightSquareBracketKeyword_3_0() { return cMultiplicityLeftSquareBracketRightSquareBracketKeyword_3_0; }
	}
	
	
	public class PlatformElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Platform");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIOSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIOSIOSKeyword_0_0 = (Keyword)cIOSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAndroidEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAndroidAndroidKeyword_1_0 = (Keyword)cAndroidEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Platform:
		//	iOS | Android;
		public EnumRule getRule() { return rule; }

		//iOS | Android
		public Alternatives getAlternatives() { return cAlternatives; }

		//iOS
		public EnumLiteralDeclaration getIOSEnumLiteralDeclaration_0() { return cIOSEnumLiteralDeclaration_0; }

		//"iOS"
		public Keyword getIOSIOSKeyword_0_0() { return cIOSIOSKeyword_0_0; }

		//Android
		public EnumLiteralDeclaration getAndroidEnumLiteralDeclaration_1() { return cAndroidEnumLiteralDeclaration_1; }

		//"Android"
		public Keyword getAndroidAndroidKeyword_1_0() { return cAndroidAndroidKeyword_1_0; }
	}
	
	private ModelElements pModel;
	private PlatformElements unknownRulePlatform;
	private DataModelElements pDataModel;
	private TypeElements pType;
	private MappingClauseElements pMappingClause;
	private SimpleTypeElements pSimpleType;
	private EntityElements pEntity;
	private AttributeElements pAttribute;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public PhysisGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	datamodels+=DataModel*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//enum Platform:
	//	iOS | Android;
	public PlatformElements getPlatformAccess() {
		return (unknownRulePlatform != null) ? unknownRulePlatform : (unknownRulePlatform = new PlatformElements());
	}
	
	public EnumRule getPlatformRule() {
		return getPlatformAccess().getRule();
	}

	//DataModel:
	//	"datamodel" name=ID "{" types+=Type* "}";
	public DataModelElements getDataModelAccess() {
		return (pDataModel != null) ? pDataModel : (pDataModel = new DataModelElements());
	}
	
	public ParserRule getDataModelRule() {
		return getDataModelAccess().getRule();
	}

	//Type:
	//	SimpleType | Entity;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//MappingClause:
	//	"is" mappedType=ID "on platform" platform=Platform;
	public MappingClauseElements getMappingClauseAccess() {
		return (pMappingClause != null) ? pMappingClause : (pMappingClause = new MappingClauseElements());
	}
	
	public ParserRule getMappingClauseRule() {
		return getMappingClauseAccess().getRule();
	}

	//SimpleType:
	//	"type" name=ID mappings+=MappingClause*;
	public SimpleTypeElements getSimpleTypeAccess() {
		return (pSimpleType != null) ? pSimpleType : (pSimpleType = new SimpleTypeElements());
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}

	//Entity:
	//	"entity" name=ID "{" attributes+=Attribute* "}";
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Attribute:
	//	name=ID ":" type=[Type] multiplicity?="[]"?;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
